#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Span:
  """
  Span covers a portion of text.

  <code>start</code> - start index of span in the raw text (inclusive).<br/>
  <code>ending</code> - end index of span in the raw text (exclusive).<br/>
  <code>label</code> - label for span.<br/>
  <code>score</code> - score of span.<br/>
  <code>source</code> - the source annotator of this span.<br/>
  <code>attributes</code> - any additional attributes assoicated with this span. a map of attribute_name => value.<br/>
  <code>multiIndex</code> - if associated with a MultiRecord which Record object is this span for.


  Attributes:
   - start: start index of span in the raw text (inclusive).
   - ending: ending index of span in the raw text (exclusive).
   - label: label for span.
   - score: score of span.
   - source: source of span.
   - attributes: any additional attributes assoicated with this span.
   - multiIndex: index of the text (in the multirecord) to which this span references.
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'start', None, None, ), # 1
    (2, TType.I32, 'ending', None, None, ), # 2
    (3, TType.STRING, 'label', None, None, ), # 3
    (4, TType.DOUBLE, 'score', None, None, ), # 4
    (5, TType.STRING, 'source', None, None, ), # 5
    (6, TType.MAP, 'attributes', (TType.STRING,None,TType.STRING,None), None, ), # 6
    (7, TType.I32, 'multiIndex', None, None, ), # 7
  )

  def __init__(self, start=None, ending=None, label=None, score=None, source=None, attributes=None, multiIndex=None,):
    self.start = start
    self.ending = ending
    self.label = label
    self.score = score
    self.source = source
    self.attributes = attributes
    self.multiIndex = multiIndex

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.start = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.ending = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.label = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.source = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.attributes = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readString();
            self.attributes[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.multiIndex = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Span')
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.I32, 1)
      oprot.writeI32(self.start)
      oprot.writeFieldEnd()
    if self.ending is not None:
      oprot.writeFieldBegin('ending', TType.I32, 2)
      oprot.writeI32(self.ending)
      oprot.writeFieldEnd()
    if self.label is not None:
      oprot.writeFieldBegin('label', TType.STRING, 3)
      oprot.writeString(self.label)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.DOUBLE, 4)
      oprot.writeDouble(self.score)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRING, 5)
      oprot.writeString(self.source)
      oprot.writeFieldEnd()
    if self.attributes is not None:
      oprot.writeFieldBegin('attributes', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.attributes))
      for kiter7,viter8 in self.attributes.items():
        oprot.writeString(kiter7)
        oprot.writeString(viter8)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.multiIndex is not None:
      oprot.writeFieldBegin('multiIndex', TType.I32, 7)
      oprot.writeI32(self.multiIndex)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.start is None:
      raise TProtocol.TProtocolException(message='Required field start is unset!')
    if self.ending is None:
      raise TProtocol.TProtocolException(message='Required field ending is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Labeling:
  """
  A labeling of text.  Really a list of Spans.

  <code>labels</code> - the labels for this labeling. Each label represented as a Span.<br/>
  <code>source</code> - the source annotator this labeling came from.<br/>
  <code>score</code> - the score for this labeling.<br/>
  <code>rawText</code> - the raw text for this labeling (if null then consult the labeling's parent's rawText field, i.e., the Record's)

  Attributes:
   - labels: the labels as spans.
   - source: the source of this labeling came from.
   - score: score for this labeling.
   - rawText: the raw text for this labeling (if null then consult the labeling's parent's rawText field)
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'labels', (TType.STRUCT,(Span, Span.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'source', None, None, ), # 2
    (3, TType.DOUBLE, 'score', None, None, ), # 3
    (4, TType.STRING, 'rawText', None, None, ), # 4
  )

  def __init__(self, labels=None, source=None, score=None, rawText=None,):
    self.labels = labels
    self.source = source
    self.score = score
    self.rawText = rawText

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.labels = []
          (_etype12, _size9) = iprot.readListBegin()
          for _i13 in xrange(_size9):
            _elem14 = Span()
            _elem14.read(iprot)
            self.labels.append(_elem14)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.source = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.rawText = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Labeling')
    if self.labels is not None:
      oprot.writeFieldBegin('labels', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.labels))
      for iter15 in self.labels:
        iter15.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRING, 2)
      oprot.writeString(self.source)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.DOUBLE, 3)
      oprot.writeDouble(self.score)
      oprot.writeFieldEnd()
    if self.rawText is not None:
      oprot.writeFieldBegin('rawText', TType.STRING, 4)
      oprot.writeString(self.rawText)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.labels is None:
      raise TProtocol.TProtocolException(message='Required field labels is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Clustering:
  """
  A clustering of labels for the text.  Each cluster is represented
  as a Labeling which in turn will have labels (list<Span>)
  representing each item in the cluster.

  <code>clusters</code> - the clusters for the this clustering. Each cluster represented as a Labeling.<br/>
  <code>source</code> - the source annotator this clustering came from.<br/>
  <code>score</code> - the score for this clustering.<br/>
  <code>rawText</code> - the raw text for this clustering (if null then consult the labeling's parent's rawText field, i.e., the Record's)

  Attributes:
   - clusters: the clusters, each cluster is a Labeling.
   - source: the source of this Clustering
   - score: score for this clustering
   - rawText: the raw text for this clustering (if null then consult the clustering's parent's rawText field)
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'clusters', (TType.STRUCT,(Labeling, Labeling.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'source', None, None, ), # 2
    (3, TType.DOUBLE, 'score', None, None, ), # 3
    (4, TType.STRING, 'rawText', None, None, ), # 4
  )

  def __init__(self, clusters=None, source=None, score=None, rawText=None,):
    self.clusters = clusters
    self.source = source
    self.score = score
    self.rawText = rawText

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.clusters = []
          (_etype19, _size16) = iprot.readListBegin()
          for _i20 in xrange(_size16):
            _elem21 = Labeling()
            _elem21.read(iprot)
            self.clusters.append(_elem21)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.source = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.rawText = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Clustering')
    if self.clusters is not None:
      oprot.writeFieldBegin('clusters', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.clusters))
      for iter22 in self.clusters:
        iter22.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRING, 2)
      oprot.writeString(self.source)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.DOUBLE, 3)
      oprot.writeDouble(self.score)
      oprot.writeFieldEnd()
    if self.rawText is not None:
      oprot.writeFieldBegin('rawText', TType.STRING, 4)
      oprot.writeString(self.rawText)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.clusters is None:
      raise TProtocol.TProtocolException(message='Required field clusters is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Node:
  """
  Nodes store their children.  Referenced as index into list<Node> in
  the containing struct.
  Here the link between Node can be labeled.

  <code>label</code> - the label for this Node.<br/>
  <code>span</code> - the span this node covers.<br/>
  <code>children</code> -  the children of the node represented as a map of <child index, edge label>. Empty string implies no label. The index is the index of the node in the parent data structure (i.e., the tree's nodes).<br/>
  <code>source</code> - the source annotator this node came from.<br/>
  <code>score</code> - the score for this node.<br/>

  Attributes:
   - label: the label of the node.
   - span: the span this node covers.
   - children: the children of the node represented as a map of <child index, edge label>. Empty string implies no label.
   - source: source of the node .
   - score: the score for this node.
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'label', None, None, ), # 1
    (2, TType.STRUCT, 'span', (Span, Span.thrift_spec), None, ), # 2
    (3, TType.MAP, 'children', (TType.I32,None,TType.STRING,None), None, ), # 3
    (4, TType.STRING, 'source', None, None, ), # 4
    (5, TType.DOUBLE, 'score', None, None, ), # 5
  )

  def __init__(self, label=None, span=None, children=None, source=None, score=None,):
    self.label = label
    self.span = span
    self.children = children
    self.source = source
    self.score = score

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.label = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.span = Span()
          self.span.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.children = {}
          (_ktype24, _vtype25, _size23 ) = iprot.readMapBegin()
          for _i27 in xrange(_size23):
            _key28 = iprot.readI32();
            _val29 = iprot.readString();
            self.children[_key28] = _val29
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.source = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Node')
    if self.label is not None:
      oprot.writeFieldBegin('label', TType.STRING, 1)
      oprot.writeString(self.label)
      oprot.writeFieldEnd()
    if self.span is not None:
      oprot.writeFieldBegin('span', TType.STRUCT, 2)
      self.span.write(oprot)
      oprot.writeFieldEnd()
    if self.children is not None:
      oprot.writeFieldBegin('children', TType.MAP, 3)
      oprot.writeMapBegin(TType.I32, TType.STRING, len(self.children))
      for kiter30,viter31 in self.children.items():
        oprot.writeI32(kiter30)
        oprot.writeString(viter31)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRING, 4)
      oprot.writeString(self.source)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.DOUBLE, 5)
      oprot.writeDouble(self.score)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.label is None:
      raise TProtocol.TProtocolException(message='Required field label is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Tree:
  """
  Trees are a set of connected nodes with a top node.

  <code>nodes</code> - the list of labeled nodes. <br/>
  <code>top</code> - the index in nodes of the top node. <br/>
  <code>source</code> - the source annotator this Tree came from.<br/>
  <code>score</code> - the score for this Tree.

  Attributes:
   - nodes: list of labeled nodes.
   - top: the  index of top/root node in nodes.
   - source: the source of this tree.
   - score: the score of this tree.
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'nodes', (TType.STRUCT,(Node, Node.thrift_spec)), None, ), # 1
    (2, TType.I32, 'top', None, None, ), # 2
    (3, TType.STRING, 'source', None, None, ), # 3
    (4, TType.DOUBLE, 'score', None, None, ), # 4
  )

  def __init__(self, nodes=None, top=None, source=None, score=None,):
    self.nodes = nodes
    self.top = top
    self.source = source
    self.score = score

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.nodes = []
          (_etype35, _size32) = iprot.readListBegin()
          for _i36 in xrange(_size32):
            _elem37 = Node()
            _elem37.read(iprot)
            self.nodes.append(_elem37)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.top = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.source = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Tree')
    if self.nodes is not None:
      oprot.writeFieldBegin('nodes', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.nodes))
      for iter38 in self.nodes:
        iter38.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.top is not None:
      oprot.writeFieldBegin('top', TType.I32, 2)
      oprot.writeI32(self.top)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRING, 3)
      oprot.writeString(self.source)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.DOUBLE, 4)
      oprot.writeDouble(self.score)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.nodes is None:
      raise TProtocol.TProtocolException(message='Required field nodes is unset!')
    if self.top is None:
      raise TProtocol.TProtocolException(message='Required field top is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Forest:
  """
  Forest is a set of trees.

  <code>trees</code> - the trees for the this forest.<br/>
  <code>source</code> - the source annotator this forest came from.<br/>
  <code>score</code> - the score for this forest.<br/>
  <code>rawText</code> - the raw text for this forest (if null then consult the labeling's parent's rawText field, i.e., the Record's)

  Attributes:
   - trees: the trees in this Forest
   - rawText: the raw text for this Forest (if null then consult the tree's parent's rawText field)
   - source: the source of this Forest
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'trees', (TType.STRUCT,(Tree, Tree.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'rawText', None, None, ), # 2
    (3, TType.STRING, 'source', None, None, ), # 3
  )

  def __init__(self, trees=None, rawText=None, source=None,):
    self.trees = trees
    self.rawText = rawText
    self.source = source

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.trees = []
          (_etype42, _size39) = iprot.readListBegin()
          for _i43 in xrange(_size39):
            _elem44 = Tree()
            _elem44.read(iprot)
            self.trees.append(_elem44)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.rawText = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.source = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Forest')
    if self.trees is not None:
      oprot.writeFieldBegin('trees', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.trees))
      for iter45 in self.trees:
        iter45.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.rawText is not None:
      oprot.writeFieldBegin('rawText', TType.STRING, 2)
      oprot.writeString(self.rawText)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRING, 3)
      oprot.writeString(self.source)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.trees is None:
      raise TProtocol.TProtocolException(message='Required field trees is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Relation:
  """
  Relations are between two spans.

  <code>start</code> - the index of the span that starts this relation.<br/>
  <code>ending</code> - the index of the span that ends this relation.<br/>
  <code>label</code> - the label for this relation.<br/>
  <code>source</code> - where this relation came from.<br/>
  <code>score</code> - the score for this relation.<br/>

  Attributes:
   - start
   - ending
   - label
   - source
   - score
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'start', None, None, ), # 1
    (2, TType.I32, 'ending', None, None, ), # 2
    (3, TType.STRING, 'label', None, None, ), # 3
    (4, TType.STRING, 'source', None, None, ), # 4
    (5, TType.DOUBLE, 'score', None, None, ), # 5
  )

  def __init__(self, start=None, ending=None, label=None, source=None, score=None,):
    self.start = start
    self.ending = ending
    self.label = label
    self.source = source
    self.score = score

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.start = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.ending = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.label = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.source = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Relation')
    if self.start is not None:
      oprot.writeFieldBegin('start', TType.I32, 1)
      oprot.writeI32(self.start)
      oprot.writeFieldEnd()
    if self.ending is not None:
      oprot.writeFieldBegin('ending', TType.I32, 2)
      oprot.writeI32(self.ending)
      oprot.writeFieldEnd()
    if self.label is not None:
      oprot.writeFieldBegin('label', TType.STRING, 3)
      oprot.writeString(self.label)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRING, 4)
      oprot.writeString(self.source)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.DOUBLE, 5)
      oprot.writeDouble(self.score)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.start is None:
      raise TProtocol.TProtocolException(message='Required field start is unset!')
    if self.ending is None:
      raise TProtocol.TProtocolException(message='Required field ending is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class View:
  """
  A View is the most general data structure.  Spans and their relations.

  <code>spans</code> - the spans of for this view.<br/>
  <code>relations</code> - the relations of this view.<br/>
  <code>source</code> - the source annotator this view came from.<br/>
  <code>score</code> - the score for this view.<br/>
  <code>rawText</code> - the raw text for this view (if null then consult the labeling's parent's rawText field, i.e., the Record's)

  Attributes:
   - spans
   - relations
   - rawText
   - source
   - score
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'spans', (TType.STRUCT,(Span, Span.thrift_spec)), None, ), # 1
    (2, TType.LIST, 'relations', (TType.STRUCT,(Relation, Relation.thrift_spec)), None, ), # 2
    (3, TType.STRING, 'rawText', None, None, ), # 3
    (4, TType.STRING, 'source', None, None, ), # 4
    (5, TType.DOUBLE, 'score', None, None, ), # 5
  )

  def __init__(self, spans=None, relations=None, rawText=None, source=None, score=None,):
    self.spans = spans
    self.relations = relations
    self.rawText = rawText
    self.source = source
    self.score = score

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.spans = []
          (_etype49, _size46) = iprot.readListBegin()
          for _i50 in xrange(_size46):
            _elem51 = Span()
            _elem51.read(iprot)
            self.spans.append(_elem51)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.relations = []
          (_etype55, _size52) = iprot.readListBegin()
          for _i56 in xrange(_size52):
            _elem57 = Relation()
            _elem57.read(iprot)
            self.relations.append(_elem57)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.rawText = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.source = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('View')
    if self.spans is not None:
      oprot.writeFieldBegin('spans', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.spans))
      for iter58 in self.spans:
        iter58.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.relations is not None:
      oprot.writeFieldBegin('relations', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.relations))
      for iter59 in self.relations:
        iter59.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.rawText is not None:
      oprot.writeFieldBegin('rawText', TType.STRING, 3)
      oprot.writeString(self.rawText)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRING, 4)
      oprot.writeString(self.source)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.DOUBLE, 5)
      oprot.writeDouble(self.score)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.spans is None:
      raise TProtocol.TProtocolException(message='Required field spans is unset!')
    if self.relations is None:
      raise TProtocol.TProtocolException(message='Required field relations is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ServiceUnavailableException(TException):
  """
  Attributes:
   - reason
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'reason', None, None, ), # 1
  )

  def __init__(self, reason=None,):
    self.reason = reason

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.reason = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServiceUnavailableException')
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 1)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ServiceSecurityException(TException):
  """
  Attributes:
   - reason
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'reason', None, None, ), # 1
  )

  def __init__(self, reason=None,):
    self.reason = reason

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.reason = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServiceSecurityException')
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 1)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AnnotationFailedException(TException):
  """
  Attributes:
   - reason
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'reason', None, None, ), # 1
  )

  def __init__(self, reason=None,):
    self.reason = reason

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.reason = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AnnotationFailedException')
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 1)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
