#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import cogcomp.base.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Record:
  """
  Records are the objects that hold all annotations on a text.

  <code>identifier</code> - a unique identifier for this record.<br/>
  <code>rawText</code> - the raw text associated with this record.<br/>
  <code>labelViews</code> - Label views. Contains all the Labelings for this record.<br/>
  <code>clusterViews</code> - Cluster views. Contains all the Clusterings for this record.<br/>
  <code>parseViews</code> - Parse views. Contains all the Forests for this record.<br/>
  <code>views</code> - Label views. Contains all the Views for this record.<br/>
  <code>whitespaced</code> - Was this Record created using a ws* method?<br/>


  Attributes:
   - identifier: how to identify this record.
   - rawText: The raw text string.
   - labelViews: Label views.  Contains all the Labelings.
   - clusterViews: Cluster views.  Contains all the Clusterings.
   - parseViews: Parse views.  Contains all the Forests.
   - views: General views.  Contains all the Views.
   - whitespaced: Was this Record created using a ws* method.
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'identifier', None, None, ), # 1
    (2, TType.STRING, 'rawText', None, None, ), # 2
    (3, TType.MAP, 'labelViews', (TType.STRING,None,TType.STRUCT,(cogcomp.base.ttypes.Labeling, cogcomp.base.ttypes.Labeling.thrift_spec)), None, ), # 3
    (4, TType.MAP, 'clusterViews', (TType.STRING,None,TType.STRUCT,(cogcomp.base.ttypes.Clustering, cogcomp.base.ttypes.Clustering.thrift_spec)), None, ), # 4
    (5, TType.MAP, 'parseViews', (TType.STRING,None,TType.STRUCT,(cogcomp.base.ttypes.Forest, cogcomp.base.ttypes.Forest.thrift_spec)), None, ), # 5
    (6, TType.MAP, 'views', (TType.STRING,None,TType.STRUCT,(cogcomp.base.ttypes.View, cogcomp.base.ttypes.View.thrift_spec)), None, ), # 6
    (7, TType.BOOL, 'whitespaced', None, None, ), # 7
  )

  def __init__(self, identifier=None, rawText=None, labelViews=None, clusterViews=None, parseViews=None, views=None, whitespaced=None,):
    self.identifier = identifier
    self.rawText = rawText
    self.labelViews = labelViews
    self.clusterViews = clusterViews
    self.parseViews = parseViews
    self.views = views
    self.whitespaced = whitespaced

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.identifier = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.rawText = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.labelViews = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = cogcomp.base.ttypes.Labeling()
            _val6.read(iprot)
            self.labelViews[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.clusterViews = {}
          (_ktype8, _vtype9, _size7 ) = iprot.readMapBegin()
          for _i11 in xrange(_size7):
            _key12 = iprot.readString();
            _val13 = cogcomp.base.ttypes.Clustering()
            _val13.read(iprot)
            self.clusterViews[_key12] = _val13
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.parseViews = {}
          (_ktype15, _vtype16, _size14 ) = iprot.readMapBegin()
          for _i18 in xrange(_size14):
            _key19 = iprot.readString();
            _val20 = cogcomp.base.ttypes.Forest()
            _val20.read(iprot)
            self.parseViews[_key19] = _val20
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.views = {}
          (_ktype22, _vtype23, _size21 ) = iprot.readMapBegin()
          for _i25 in xrange(_size21):
            _key26 = iprot.readString();
            _val27 = cogcomp.base.ttypes.View()
            _val27.read(iprot)
            self.views[_key26] = _val27
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.whitespaced = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Record')
    if self.identifier is not None:
      oprot.writeFieldBegin('identifier', TType.STRING, 1)
      oprot.writeString(self.identifier)
      oprot.writeFieldEnd()
    if self.rawText is not None:
      oprot.writeFieldBegin('rawText', TType.STRING, 2)
      oprot.writeString(self.rawText)
      oprot.writeFieldEnd()
    if self.labelViews is not None:
      oprot.writeFieldBegin('labelViews', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.labelViews))
      for kiter28,viter29 in self.labelViews.items():
        oprot.writeString(kiter28)
        viter29.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.clusterViews is not None:
      oprot.writeFieldBegin('clusterViews', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.clusterViews))
      for kiter30,viter31 in self.clusterViews.items():
        oprot.writeString(kiter30)
        viter31.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.parseViews is not None:
      oprot.writeFieldBegin('parseViews', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.parseViews))
      for kiter32,viter33 in self.parseViews.items():
        oprot.writeString(kiter32)
        viter33.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.views is not None:
      oprot.writeFieldBegin('views', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.views))
      for kiter34,viter35 in self.views.items():
        oprot.writeString(kiter34)
        viter35.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.whitespaced is not None:
      oprot.writeFieldBegin('whitespaced', TType.BOOL, 7)
      oprot.writeBool(self.whitespaced)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.identifier is None:
      raise TProtocol.TProtocolException(message='Required field identifier is unset!')
    if self.rawText is None:
      raise TProtocol.TProtocolException(message='Required field rawText is unset!')
    if self.labelViews is None:
      raise TProtocol.TProtocolException(message='Required field labelViews is unset!')
    if self.clusterViews is None:
      raise TProtocol.TProtocolException(message='Required field clusterViews is unset!')
    if self.parseViews is None:
      raise TProtocol.TProtocolException(message='Required field parseViews is unset!')
    if self.views is None:
      raise TProtocol.TProtocolException(message='Required field views is unset!')
    if self.whitespaced is None:
      raise TProtocol.TProtocolException(message='Required field whitespaced is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MultiRecord:
  """
  Attributes:
   - identifier
   - records
   - labelViews
   - clusterViews
   - parseViews
   - views
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'identifier', None, None, ), # 1
    (2, TType.LIST, 'records', (TType.STRING,None), None, ), # 2
    (3, TType.MAP, 'labelViews', (TType.STRING,None,TType.STRUCT,(cogcomp.base.ttypes.Labeling, cogcomp.base.ttypes.Labeling.thrift_spec)), None, ), # 3
    (4, TType.MAP, 'clusterViews', (TType.STRING,None,TType.STRUCT,(cogcomp.base.ttypes.Clustering, cogcomp.base.ttypes.Clustering.thrift_spec)), None, ), # 4
    (5, TType.MAP, 'parseViews', (TType.STRING,None,TType.STRUCT,(cogcomp.base.ttypes.Forest, cogcomp.base.ttypes.Forest.thrift_spec)), None, ), # 5
    (6, TType.MAP, 'views', (TType.STRING,None,TType.STRUCT,(cogcomp.base.ttypes.View, cogcomp.base.ttypes.View.thrift_spec)), None, ), # 6
  )

  def __init__(self, identifier=None, records=None, labelViews=None, clusterViews=None, parseViews=None, views=None,):
    self.identifier = identifier
    self.records = records
    self.labelViews = labelViews
    self.clusterViews = clusterViews
    self.parseViews = parseViews
    self.views = views

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.identifier = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.records = []
          (_etype39, _size36) = iprot.readListBegin()
          for _i40 in xrange(_size36):
            _elem41 = iprot.readString();
            self.records.append(_elem41)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.labelViews = {}
          (_ktype43, _vtype44, _size42 ) = iprot.readMapBegin()
          for _i46 in xrange(_size42):
            _key47 = iprot.readString();
            _val48 = cogcomp.base.ttypes.Labeling()
            _val48.read(iprot)
            self.labelViews[_key47] = _val48
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.clusterViews = {}
          (_ktype50, _vtype51, _size49 ) = iprot.readMapBegin()
          for _i53 in xrange(_size49):
            _key54 = iprot.readString();
            _val55 = cogcomp.base.ttypes.Clustering()
            _val55.read(iprot)
            self.clusterViews[_key54] = _val55
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.parseViews = {}
          (_ktype57, _vtype58, _size56 ) = iprot.readMapBegin()
          for _i60 in xrange(_size56):
            _key61 = iprot.readString();
            _val62 = cogcomp.base.ttypes.Forest()
            _val62.read(iprot)
            self.parseViews[_key61] = _val62
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.views = {}
          (_ktype64, _vtype65, _size63 ) = iprot.readMapBegin()
          for _i67 in xrange(_size63):
            _key68 = iprot.readString();
            _val69 = cogcomp.base.ttypes.View()
            _val69.read(iprot)
            self.views[_key68] = _val69
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MultiRecord')
    if self.identifier is not None:
      oprot.writeFieldBegin('identifier', TType.STRING, 1)
      oprot.writeString(self.identifier)
      oprot.writeFieldEnd()
    if self.records is not None:
      oprot.writeFieldBegin('records', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.records))
      for iter70 in self.records:
        oprot.writeString(iter70)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.labelViews is not None:
      oprot.writeFieldBegin('labelViews', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.labelViews))
      for kiter71,viter72 in self.labelViews.items():
        oprot.writeString(kiter71)
        viter72.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.clusterViews is not None:
      oprot.writeFieldBegin('clusterViews', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.clusterViews))
      for kiter73,viter74 in self.clusterViews.items():
        oprot.writeString(kiter73)
        viter74.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.parseViews is not None:
      oprot.writeFieldBegin('parseViews', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.parseViews))
      for kiter75,viter76 in self.parseViews.items():
        oprot.writeString(kiter75)
        viter76.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.views is not None:
      oprot.writeFieldBegin('views', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.views))
      for kiter77,viter78 in self.views.items():
        oprot.writeString(kiter77)
        viter78.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.identifier is None:
      raise TProtocol.TProtocolException(message='Required field identifier is unset!')
    if self.records is None:
      raise TProtocol.TProtocolException(message='Required field records is unset!')
    if self.labelViews is None:
      raise TProtocol.TProtocolException(message='Required field labelViews is unset!')
    if self.clusterViews is None:
      raise TProtocol.TProtocolException(message='Required field clusterViews is unset!')
    if self.parseViews is None:
      raise TProtocol.TProtocolException(message='Required field parseViews is unset!')
    if self.views is None:
      raise TProtocol.TProtocolException(message='Required field views is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
