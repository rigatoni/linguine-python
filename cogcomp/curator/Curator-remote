#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from cogcomp.curator import Curator
from cogcomp.curator.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '   describeAnnotations()'
  print '  bool isCacheAvailable()'
  print '  Record provide(string view_name, string text, bool forceUpdate)'
  print '  Record wsprovide(string view_name,  sentences, bool forceUpdate)'
  print '  Record getRecord(string text)'
  print '  Record wsgetRecord( sentences)'
  print '  Record getRecordById(string identifier)'
  print '  void storeRecord(Record record)'
  print '  MultiRecord getMultiRecord( texts)'
  print '  MultiRecord provideMulti(string view_name,  texts, bool forceUpdate)'
  print '  void storeMultiRecord(MultiRecord record)'
  print '  bool ping()'
  print '  string getName()'
  print '  string getVersion()'
  print '  string getSourceIdentifier()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Curator.Client(protocol)
transport.open()

if cmd == 'describeAnnotations':
  if len(args) != 0:
    print 'describeAnnotations requires 0 args'
    sys.exit(1)
  pp.pprint(client.describeAnnotations())

elif cmd == 'isCacheAvailable':
  if len(args) != 0:
    print 'isCacheAvailable requires 0 args'
    sys.exit(1)
  pp.pprint(client.isCacheAvailable())

elif cmd == 'provide':
  if len(args) != 3:
    print 'provide requires 3 args'
    sys.exit(1)
  pp.pprint(client.provide(args[0],args[1],eval(args[2]),))

elif cmd == 'wsprovide':
  if len(args) != 3:
    print 'wsprovide requires 3 args'
    sys.exit(1)
  pp.pprint(client.wsprovide(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'getRecord':
  if len(args) != 1:
    print 'getRecord requires 1 args'
    sys.exit(1)
  pp.pprint(client.getRecord(args[0],))

elif cmd == 'wsgetRecord':
  if len(args) != 1:
    print 'wsgetRecord requires 1 args'
    sys.exit(1)
  pp.pprint(client.wsgetRecord(eval(args[0]),))

elif cmd == 'getRecordById':
  if len(args) != 1:
    print 'getRecordById requires 1 args'
    sys.exit(1)
  pp.pprint(client.getRecordById(args[0],))

elif cmd == 'storeRecord':
  if len(args) != 1:
    print 'storeRecord requires 1 args'
    sys.exit(1)
  pp.pprint(client.storeRecord(eval(args[0]),))

elif cmd == 'getMultiRecord':
  if len(args) != 1:
    print 'getMultiRecord requires 1 args'
    sys.exit(1)
  pp.pprint(client.getMultiRecord(eval(args[0]),))

elif cmd == 'provideMulti':
  if len(args) != 3:
    print 'provideMulti requires 3 args'
    sys.exit(1)
  pp.pprint(client.provideMulti(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'storeMultiRecord':
  if len(args) != 1:
    print 'storeMultiRecord requires 1 args'
    sys.exit(1)
  pp.pprint(client.storeMultiRecord(eval(args[0]),))

elif cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'getName':
  if len(args) != 0:
    print 'getName requires 0 args'
    sys.exit(1)
  pp.pprint(client.getName())

elif cmd == 'getVersion':
  if len(args) != 0:
    print 'getVersion requires 0 args'
    sys.exit(1)
  pp.pprint(client.getVersion())

elif cmd == 'getSourceIdentifier':
  if len(args) != 0:
    print 'getSourceIdentifier requires 0 args'
    sys.exit(1)
  pp.pprint(client.getSourceIdentifier())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
